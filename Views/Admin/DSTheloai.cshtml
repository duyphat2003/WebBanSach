@model IEnumerable<WebBanSach.Models.CHUDE>
@{
    ViewBag.Title = "DSTheloai";
    Layout = "~/Ares/Admin/Views/Shared/Admin.cshtml";
}

<div class="container-sm" style="text-align:center">
    <h2 style="text-align: center">Danh Sách Chủ Đề</h2>

    <p style="text-align: end">
        @Html.ActionLink("TẠO MỚI", "CreateCD", null, new { @class = "btn btn-primary" })
    </p>
    <main>
        <table class="table" id="list1">
            <tr>
                <th>
                    Mã Chủ Đề
                </th>
                <th>
                    Tên Chủ Đề
                </th>
                <th>
                    Lệnh
                </th>
            </tr>

            @foreach (var item in Model)
            {
                <tr class="item">
                    <td>
                        @Html.DisplayFor(modelItem => item.MaCD)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TenChuDe)
                    </td>
                    <td>
                        @Html.ActionLink("Sửa", "EditCD", "Admin", new { id = item.MaCD }, new { @class = "btn btn-outline-primary" }) |
                        @Html.ActionLink("Chi Tiết", "DetailCD", "Admin", new { id = item.MaCD }, new { @class = "btn btn-outline-info" }) |
                        @Html.ActionLink("Xóa", "DeleteCD", "Admin", new { id = item.MaCD }, new { @class = "btn btn-outline-danger bg-red " })
                    </td>
                </tr>
            }

        </table>
        <nav class="pagination-container">
            <button class="pagination-button" id="prev-button" aria-label="Previous page" title="Previous page">
                &lt;
            </button>

            <div id="pagination-numbers">

            </div>

            <button class="pagination-button" id="next-button" aria-label="Next page" title="Next page">
                &gt;
            </button>
        </nav>
    </main>

</div>

<script>
    const paginationNumbers = document.getElementById("pagination-numbers");
    const paginatedList = document.getElementById("list1");
    const listItems = paginatedList.querySelectorAll(".item");
    const nextButton = document.getElementById("next-button");
    const prevButton = document.getElementById("prev-button");

    const paginationLimit = 6;
    const pageCount = Math.ceil(listItems.length / paginationLimit);
    let currentPage = 1;

    const disableButton = (button) => {
        button.classList.add("disabled");
        button.setAttribute("disabled", true);
    };

    const enableButton = (button) => {
        button.classList.remove("disabled");
        button.removeAttribute("disabled");
    };

    const handlePageButtonsStatus = () => {
        if (currentPage === 1) {
            disableButton(prevButton);
        } else {
            enableButton(prevButton);
        }

        if (pageCount === currentPage) {
            disableButton(nextButton);
        } else {
            enableButton(nextButton);
        }
    };

    const handleActivePageNumber = () => {
        document.querySelectorAll(".pagination-number").forEach((button) => {
            button.classList.remove("active");
            const pageIndex = Number(button.getAttribute("page-index"));
            if (pageIndex == currentPage) {
                button.classList.add("active");
            }
        });
    };

    const appendPageNumber = (index) => {
        const pageNumber = document.createElement("button");
        pageNumber.className = "pagination-number";
        pageNumber.innerHTML = index;
        pageNumber.setAttribute("page-index", index);
        pageNumber.setAttribute("aria-label", "Page " + index);

        paginationNumbers.appendChild(pageNumber);
    };

    const getPaginationNumbers = () => {
        for (let i = 1; i <= pageCount; i++) {
            appendPageNumber(i);
        }
    };

    const setCurrentPage = (pageNum) => {
        currentPage = pageNum;

        handleActivePageNumber();
        handlePageButtonsStatus();

        const prevRange = (pageNum - 1) * paginationLimit;
        const currRange = pageNum * paginationLimit;

        listItems.forEach((item, index) => {
            item.classList.add("hidden");
            if (index >= prevRange && index < currRange) {
                item.classList.remove("hidden");
            }
        });
    };

    window.addEventListener("load", () => {
        getPaginationNumbers();
        setCurrentPage(1);

        prevButton.addEventListener("click", () => {
            setCurrentPage(currentPage - 1);
        });

        nextButton.addEventListener("click", () => {
            setCurrentPage(currentPage + 1);
        });

        document.querySelectorAll(".pagination-number").forEach((button) => {
            const pageIndex = Number(button.getAttribute("page-index"));

            if (pageIndex) {
                button.addEventListener("click", () => {
                    setCurrentPage(pageIndex);
                });
            }
        });
    });

</script>

