@model IEnumerable<WebBanSach.Models.THONGBAO>
@{
    Layout = "~/Views/Shared/TrangChu.cshtml";
}

<link rel="stylesheet" href="~/Content/UserInfo.css" />
<div class="Size-Form">
    <div class="div-left-menu">
        <h2>TÀI KHOẢN</h2>
        <hr />
        <ol>
            <li>
                <a href="@Url.Action("LoginRegister", "User", new {topic = "AcountInfo"})">Thông tin tài khoản</a>
                <hr />
            </li>

            <li>
                <a href="@Url.Action("LoginRegister", "User", new {topic = "CartInfo"})">Đơn hàng của tôi</a>
                <hr />
            </li>

            <li>
                <a href="@Url.Action("LoginRegister", "User", new {topic = "NofiContent"})">Thông báo</a>
                <hr />
            </li>
            <li>
                <a href="@Url.Action("LogOut", "User")" target="_self">Đăng xuất</a>
                <hr />
            </li>

        </ol>
    </div>
    <div class="div-right-info">
        <div>@ViewBag.Title</div>
        <main>
            <table class="NofiBoard" id="list1">
                <tr>
                    <td>
                        STT
                    </td>

                    <td>
                        Nội dung
                    </td>
                </tr>
                @foreach (var item in Model)
                {
                    <tr class="item">
                        <td>
                            @item.ID
                        </td>

                        <td>
                            @item.Content
                        </td>
                    </tr>
                }
            </table>

            <nav class="pagination-container">
                <button class="pagination-button" id="prev-button" aria-label="Previous page" title="Previous page">
                    &lt;
                </button>

                <div id="pagination-numbers">

                </div>

                <button class="pagination-button" id="next-button" aria-label="Next page" title="Next page">
                    &gt;
                </button>
            </nav>
        </main>
    </div>
</div>

<script>
    const paginationNumbers = document.getElementById("pagination-numbers");
    const paginatedList = document.getElementById("list1");
    const listItems = paginatedList.querySelectorAll(".item");
    const nextButton = document.getElementById("next-button");
    const prevButton = document.getElementById("prev-button");

    const paginationLimit = 6;
    const pageCount = Math.ceil(listItems.length / paginationLimit);
    let currentPage = 1;

    const disableButton = (button) => {
        button.classList.add("disabled");
        button.setAttribute("disabled", true);
    };

    const enableButton = (button) => {
        button.classList.remove("disabled");
        button.removeAttribute("disabled");
    };

    const handlePageButtonsStatus = () => {
        if (currentPage === 1) {
            disableButton(prevButton);
        } else {
            enableButton(prevButton);
        }

        if (pageCount === currentPage) {
            disableButton(nextButton);
        } else {
            enableButton(nextButton);
        }
    };

    const handleActivePageNumber = () => {
        document.querySelectorAll(".pagination-number").forEach((button) => {
            button.classList.remove("active");
            const pageIndex = Number(button.getAttribute("page-index"));
            if (pageIndex == currentPage) {
                button.classList.add("active");
            }
        });
    };

    const appendPageNumber = (index) => {
        const pageNumber = document.createElement("button");
        pageNumber.className = "pagination-number";
        pageNumber.innerHTML = index;
        pageNumber.setAttribute("page-index", index);
        pageNumber.setAttribute("aria-label", "Page " + index);

        paginationNumbers.appendChild(pageNumber);
    };

    const getPaginationNumbers = () => {
        for (let i = 1; i <= pageCount; i++) {
            appendPageNumber(i);
        }
    };

    const setCurrentPage = (pageNum) => {
        currentPage = pageNum;

        handleActivePageNumber();
        handlePageButtonsStatus();

        const prevRange = (pageNum - 1) * paginationLimit;
        const currRange = pageNum * paginationLimit;

        listItems.forEach((item, index) => {
            item.classList.add("hidden");
            if (index >= prevRange && index < currRange) {
                item.classList.remove("hidden");
            }
        });
    };

    window.addEventListener("load", () => {
        getPaginationNumbers();
        setCurrentPage(1);

        prevButton.addEventListener("click", () => {
            setCurrentPage(currentPage - 1);
        });

        nextButton.addEventListener("click", () => {
            setCurrentPage(currentPage + 1);
        });

        document.querySelectorAll(".pagination-number").forEach((button) => {
            const pageIndex = Number(button.getAttribute("page-index"));

            if (pageIndex) {
                button.addEventListener("click", () => {
                    setCurrentPage(pageIndex);
                });
            }
        });
    });

</script>



